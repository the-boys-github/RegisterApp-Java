package edu.uark.registerapp.commands.employees;

import edu.uark.registerapp.commands.ResultCommandInterface;
import edu.uark.registerapp.commands.exceptions.ConflictException;
import edu.uark.registerapp.commands.exceptions.UnprocessableEntityException;
import edu.uark.registerapp.models.api.Employee;
import edu.uark.registerapp.models.entities.EmployeeEntity;
import edu.uark.registerapp.models.repositories.EmployeeRepository;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class EmployeeCreateCommand implements ResultCommandInterface<Employee> {
    private Employee employee;
    private boolean isInitialEmployee;

    public Employee execute(){
        this.validate();

        if(isInitialEmployee){
            employee.setClassification(3);
        }
        
		final EmployeeEntity createdEmployeeEntity = this.createEmployeeEntity();

		// Synchronize information generated by the database upon INSERT.
		this.employee.setId(createdEmployeeEntity.getId()); 
		this.employee.setCreatedOn(createdEmployeeEntity.getCreatedOn());

		return this.employee;
    }


	@Transactional
	private EmployeeEntity createEmployeeEntity() {
		final Optional<EmployeeEntity> queriedEmployeeEntity =
			this.employeeRepository
				.findById(this.employee.getId());

		if (queriedEmployeeEntity.isPresent()) {
			throw new ConflictException("id");
		}

		// No ENTITY object was returned from the database, thus the API object's
		// lookupcode must be unique.

		// Write, via an INSERT, the new record to the database.
		return this.employeeRepository.save(
			new EmployeeEntity(employee));
	}

    private void validate(){
        boolean isLastNameNotBlank = employee.getLastName().length() > 0;
        boolean isFirstNameNotBlank = employee.getFirstName().length() > 0;
        boolean isPasswordNotBlank = employee.getPassword().length() > 0;

        if(!isFirstNameNotBlank && !isLastNameNotBlank && !isPasswordNotBlank){
            throw new UnprocessableEntityException("Blank Parameter");
        }
    }

    public Employee getEmployee() {
        return employee;
    }

    public EmployeeCreateCommand setEmployee(Employee employee) {
        this.employee = employee;
        return this;
    }

    public boolean isInitialEmployee() {
        return isInitialEmployee;
    }

    public EmployeeCreateCommand setInitialEmployee(boolean initialEmployee) {
        this.isInitialEmployee = initialEmployee;
        return this;
    }

    @Autowired
    EmployeeRepository employeeRepository;
}
